package view;

import capman.Capman;
import controller.CRUDController;
import controller.Youtube;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.UnknownHostException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.regex.Pattern;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.Account;
import model.Site;
import model.Video;
import view.components.AccountsComboBoxModel;
import view.components.VideosTableButtonsEditor;
import view.components.VideosTableButtonsRenderer;
import view.components.VideosTableModel;
import view.components.VideosTableURLRenderer;
import view.components.ProgressBarTask;
import view.components.VideosTableTransferHandler;

/**
 *
 * @author edisonarango
 */
public class MainFrame extends javax.swing.JFrame implements PropertyChangeListener {
    
    private CRUDController CRUD;
    private AccountsComboBoxModel accountsList;
    private VideosTableModel videosTableList;
    private TableRowSorter<TableModel> videosTableSorter;
    /**
     * Creates new form MainFrame
     */
    public MainFrame(CRUDController CRUD) {
        this.CRUD = CRUD;
        this.accountsList = new AccountsComboBoxModel(this.CRUD.getAllAccounts());
        this.videosTableList = new VideosTableModel(this);
        initComponents();
        setLocationRelativeTo(null);
        getContentPane().setBackground(new Color(245,245,245));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialogWaitingForLogin = new javax.swing.JDialog();
        headerDialogWaiting = new javax.swing.JPanel();
        dialogWaitingTitle = new javax.swing.JLabel();
        labelWaiting = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        accountsPanel = new javax.swing.JPanel();
        accountSelector = new javax.swing.JComboBox();
        accountLabel = new javax.swing.JLabel();
        addAccount = new javax.swing.JButton();
        removeAccount = new javax.swing.JButton();
        videosPanel = new javax.swing.JPanel();
        scrollPaneTable = new javax.swing.JScrollPane();
        videosTable = new javax.swing.JTable() {
            private final Color goodColor = new Color(232,245,233);
            private final Color goodColorDark = new Color(102,187,106);
            private final Color badColor = new Color(255,235,238);
            private final Color badColorDark = new Color(239,83,80);
            private final Color dark = new Color(224,224,224);
            @Override public Component prepareRenderer(TableCellRenderer tcr, int row, int column) {
                Component c = super.prepareRenderer(tcr, row, column);
                c.setForeground(getForeground());
                String capLocal = (String)this.getModel().getValueAt(row, 2);
                String capRemote = (String)this.getModel().getValueAt(row, 4);
                if (capLocal.equals("--") || capRemote.equals("--")) {
                    Color rowColor = this.isRowSelected(row) ? dark : getBackground();
                    c.setBackground(rowColor);
                    return c;
                }
                int cLocal = Integer.valueOf(capLocal);
                int cRemote = Integer.valueOf(capRemote);
                if (cLocal == cRemote) {
                    Color rowColor = this.isRowSelected(row) ? goodColorDark : goodColor;
                    c.setBackground(rowColor);
                }
                else {
                    Color rowColor = this.isRowSelected(row) ? badColorDark : badColor;
                    c.setBackground(rowColor);
                }
                return c;
            }
        };
        channelTitle = new javax.swing.JLabel();
        separator = new javax.swing.JSeparator();
        channelName = new javax.swing.JLabel();
        localLabel = new javax.swing.JLabel();
        remoteLabel = new javax.swing.JLabel();
        addVideoButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        downloadButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        panelDnDInfo = new javax.swing.JPanel();
        dndInfo = new javax.swing.JLabel();
        filterLabel = new javax.swing.JLabel();
        filterField = new javax.swing.JTextField();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        openWorkingDir = new javax.swing.JMenuItem();
        menuAccount = new javax.swing.JMenu();
        addAccountMenuButton = new javax.swing.JMenuItem();
        removeAccountMenuItem = new javax.swing.JMenuItem();
        menuVideos = new javax.swing.JMenu();
        addVideoMenuItem = new javax.swing.JMenuItem();

        dialogWaitingForLogin.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        dialogWaitingForLogin.setResizable(false);
        dialogWaitingForLogin.setSize(new java.awt.Dimension(296, 200));

        headerDialogWaiting.setBackground(new java.awt.Color(76, 175, 80));

        dialogWaitingTitle.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        dialogWaitingTitle.setForeground(new java.awt.Color(255, 255, 255));
        dialogWaitingTitle.setText("Login");

        javax.swing.GroupLayout headerDialogWaitingLayout = new javax.swing.GroupLayout(headerDialogWaiting);
        headerDialogWaiting.setLayout(headerDialogWaitingLayout);
        headerDialogWaitingLayout.setHorizontalGroup(
            headerDialogWaitingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerDialogWaitingLayout.createSequentialGroup()
                .addGap(124, 124, 124)
                .addComponent(dialogWaitingTitle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        headerDialogWaitingLayout.setVerticalGroup(
            headerDialogWaitingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerDialogWaitingLayout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(dialogWaitingTitle)
                .addGap(15, 15, 15))
        );

        labelWaiting.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        labelWaiting.setText("Waiting for Google Login");

        jProgressBar1.setIndeterminate(true);

        javax.swing.GroupLayout dialogWaitingForLoginLayout = new javax.swing.GroupLayout(dialogWaitingForLogin.getContentPane());
        dialogWaitingForLogin.getContentPane().setLayout(dialogWaitingForLoginLayout);
        dialogWaitingForLoginLayout.setHorizontalGroup(
            dialogWaitingForLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogWaitingForLoginLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(dialogWaitingForLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(labelWaiting)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
            .addComponent(headerDialogWaiting, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        dialogWaitingForLoginLayout.setVerticalGroup(
            dialogWaitingForLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogWaitingForLoginLayout.createSequentialGroup()
                .addComponent(headerDialogWaiting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(labelWaiting)
                .addGap(15, 15, 15)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 30, Short.MAX_VALUE))
        );

        dialogWaitingForLogin.setLocationRelativeTo(this);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Capman");
        setBackground(new java.awt.Color(0, 0, 0));
        setMinimumSize(new java.awt.Dimension(700, 500));
        setPreferredSize(new java.awt.Dimension(800, 600));
        setSize(new java.awt.Dimension(800, 600));

        accountsPanel.setBackground(new java.awt.Color(63, 81, 181));
        accountsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        accountSelector.setModel(accountsList);
        accountSelector.setToolTipText("Select account ...");
        accountSelector.setLocation(new java.awt.Point(10, 10));
        accountSelector.setMaximumSize(new java.awt.Dimension(256, 24));
        accountSelector.setMinimumSize(new java.awt.Dimension(256, 24));
        accountSelector.setPreferredSize(new java.awt.Dimension(256, 25));
        accountSelector.setSize(new java.awt.Dimension(96, 25));
        accountSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accountSelectorActionPerformed(evt);
            }
        });

        accountLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        accountLabel.setForeground(new java.awt.Color(255, 255, 255));
        accountLabel.setText("Account:");

        addAccount.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        addAccount.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/add-circle.png"))); // NOI18N
        addAccount.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        addAccount.setBorderPainted(false);
        addAccount.setContentAreaFilled(false);
        addAccount.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAccountActionPerformed(evt);
            }
        });

        removeAccount.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        removeAccount.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/remove.png"))); // NOI18N
        removeAccount.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        removeAccount.setBorderPainted(false);
        removeAccount.setContentAreaFilled(false);
        removeAccount.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        removeAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAccountActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout accountsPanelLayout = new javax.swing.GroupLayout(accountsPanel);
        accountsPanel.setLayout(accountsPanelLayout);
        accountsPanelLayout.setHorizontalGroup(
            accountsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountsPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(accountLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(accountSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(removeAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        accountsPanelLayout.setVerticalGroup(
            accountsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountsPanelLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(accountsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(accountSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(accountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addAccount)
                    .addComponent(removeAccount))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        videosPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 30, 15, 30));
        videosPanel.setOpaque(false);
        videosPanel.setPreferredSize(new java.awt.Dimension(700, 337));

        videosTable.setModel(videosTableList);
        videosTable.getTableHeader().setReorderingAllowed(false);
        videosTable.addMouseListener(urlRenderer);
        videosTable.addMouseMotionListener(urlRenderer);
        videosTable.setTransferHandler(new VideosTableTransferHandler(videosTable));
        videosTable.setDragEnabled(true);
        videosTable.setDropMode(javax.swing.DropMode.INSERT_ROWS);
        videosTable.setGridColor(new java.awt.Color(227, 227, 227));
        videosTable.setRowHeight(42);
        videosTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        videosTable.setShowGrid(true);
        videosTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                videosTableFocusLost(evt);
            }
        });
        scrollPaneTable.setViewportView(videosTable);

        channelTitle.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        channelTitle.setText("Channel:");

        separator.setBackground(new java.awt.Color(245, 245, 245));
        separator.setForeground(new java.awt.Color(189, 189, 189));
        separator.setOpaque(true);

        channelName.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        channelName.setText("......");

        localLabel.setText("Local");

        remoteLabel.setText("Remote");

        addVideoButton.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        addVideoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/add-circle.png"))); // NOI18N
        addVideoButton.setText("Add video");
        addVideoButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        addVideoButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addVideoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVideoButtonActionPerformed(evt);
            }
        });

        refreshButton.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        refreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/_refresh.png"))); // NOI18N
        refreshButton.setText(" Refresh");
        refreshButton.setBorderPainted(false);

        editButton.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        editButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit.png"))); // NOI18N
        editButton.setText(" Edit");
        editButton.setBorderPainted(false);

        deleteButton.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete.png"))); // NOI18N
        deleteButton.setText(" Delete");
        deleteButton.setBorderPainted(false);

        downloadButton.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        downloadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/download.png"))); // NOI18N
        downloadButton.setText(" Download");
        downloadButton.setBorderPainted(false);

        panelDnDInfo.setBackground(new java.awt.Color(187, 222, 251));
        panelDnDInfo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(26, 35, 126)));

        dndInfo.setText("Drag-and-drop to change the row order");

        javax.swing.GroupLayout panelDnDInfoLayout = new javax.swing.GroupLayout(panelDnDInfo);
        panelDnDInfo.setLayout(panelDnDInfoLayout);
        panelDnDInfoLayout.setHorizontalGroup(
            panelDnDInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDnDInfoLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(dndInfo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelDnDInfoLayout.setVerticalGroup(
            panelDnDInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDnDInfoLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(dndInfo)
                .addGap(10, 10, 10))
        );

        filterLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        filterLabel.setText("Filter:");

        filterField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout videosPanelLayout = new javax.swing.GroupLayout(videosPanel);
        videosPanel.setLayout(videosPanelLayout);
        videosPanelLayout.setHorizontalGroup(
            videosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(videosPanelLayout.createSequentialGroup()
                .addComponent(channelTitle)
                .addGap(10, 10, 10)
                .addComponent(channelName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addVideoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(separator)
            .addComponent(scrollPaneTable)
            .addGroup(videosPanelLayout.createSequentialGroup()
                .addComponent(localLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(remoteLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, videosPanelLayout.createSequentialGroup()
                .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(videosPanelLayout.createSequentialGroup()
                .addComponent(downloadButton)
                .addGap(20, 20, 20)
                .addComponent(refreshButton)
                .addGap(20, 20, 20)
                .addComponent(editButton)
                .addGap(20, 20, 20)
                .addComponent(deleteButton)
                .addContainerGap(184, Short.MAX_VALUE))
            .addComponent(panelDnDInfo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(videosPanelLayout.createSequentialGroup()
                .addComponent(filterLabel)
                .addGap(32, 32, 32)
                .addComponent(filterField, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        videosPanelLayout.setVerticalGroup(
            videosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(videosPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(videosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(videosPanelLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(addVideoButton))
                    .addGroup(videosPanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(channelName, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(videosPanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(channelTitle)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(videosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filterLabel)
                    .addComponent(filterField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(videosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(localLabel)
                    .addComponent(remoteLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPaneTable, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelDnDInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(videosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(downloadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        menuFile.setText("File");

        openWorkingDir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        openWorkingDir.setText("Open working directory");
        openWorkingDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openWorkingDirActionPerformed(evt);
            }
        });
        menuFile.add(openWorkingDir);

        menuBar.add(menuFile);

        menuAccount.setText("Account");

        addAccountMenuButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        addAccountMenuButton.setText("Add Account");
        addAccountMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAccountMenuButtonActionPerformed(evt);
            }
        });
        menuAccount.add(addAccountMenuButton);

        removeAccountMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        removeAccountMenuItem.setText("Remove Account");
        removeAccountMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAccountMenuItemActionPerformed(evt);
            }
        });
        menuAccount.add(removeAccountMenuItem);

        menuBar.add(menuAccount);

        menuVideos.setText("Video");

        addVideoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.SHIFT_MASK | Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        addVideoMenuItem.setText("Add Video");
        addVideoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVideoMenuItemActionPerformed(evt);
            }
        });
        menuVideos.add(addVideoMenuItem);

        menuBar.add(menuVideos);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(accountsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(videosPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(accountsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(videosPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAccountActionPerformed
        int optionSelected = JOptionPane.showConfirmDialog(this, "A browser window will be opened to add a Google Account, \nDo you want to continue?", "Adding account", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
        if(optionSelected == JOptionPane.NO_OPTION){
            if (this.accountSelector.getSelectedItem() == null) {
                System.exit(0);
            }
            else {
                return;
            }
        }
        
        MainFrame self = this;
        Thread login = new Thread(new Runnable(){
            @Override
            public void run() {
                try {
                    Account newAccount = CRUD.createAccount();
                    AccountsComboBoxModel accountsListNew = new AccountsComboBoxModel(accountsList);
                    accountSelector.removeAllItems();
                    accountsListNew.addElement(newAccount);
                    accountsListNew.setSelectedItem(newAccount);
                    accountsList = accountsListNew;
                    accountSelector.setModel(accountsList);
                    loadAccount();
                    JOptionPane.showMessageDialog(self, "Account added succesfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(self, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }           
        });       
        login.start();
                     
        Thread waiting = new Thread(new Runnable(){
            @Override
            public void run() {
                dialogWaitingForLogin.setVisible(true);
                addAccount.setEnabled(false);
                removeAccount.setEnabled(false);
                try {
                    login.join(2 * 60 * 1000);
                } catch (InterruptedException ex) {
                }
                dialogWaitingForLogin.setVisible(false);
                addAccount.setEnabled(true);
                removeAccount.setEnabled(true);
            }              
        });
        waiting.start();
      
    }//GEN-LAST:event_addAccountActionPerformed

    private void accountSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accountSelectorActionPerformed
        loadAccount();
    }//GEN-LAST:event_accountSelectorActionPerformed

    private void removeAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAccountActionPerformed
        Account accountToRemove = (Account)this.accountSelector.getSelectedItem();
        int optionSelected = JOptionPane.showConfirmDialog(this, "Are you sure you want to remove this account?\nAll videos associated to this account will be deleted", 
                "Removing: "+accountToRemove.getEmail(), JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if(optionSelected == JOptionPane.YES_OPTION){
            try {
                CRUD.deleteAccount(accountToRemove);
                this.accountSelector.removeItem(accountToRemove);
                this.accountsList.setSelectedToFirstItem();
                JOptionPane.showMessageDialog(this, "Account removed", "Success", JOptionPane.INFORMATION_MESSAGE);
                loadAccount();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_removeAccountActionPerformed

    private void addVideoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVideoButtonActionPerformed
        new VideoForm(this, this.CRUD.getAllSites()).setVisible(true);
    }//GEN-LAST:event_addVideoButtonActionPerformed

    private void addAccountMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAccountMenuButtonActionPerformed
        this.addAccountActionPerformed(evt);
    }//GEN-LAST:event_addAccountMenuButtonActionPerformed

    private void removeAccountMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAccountMenuItemActionPerformed
        this.removeAccountActionPerformed(evt);
    }//GEN-LAST:event_removeAccountMenuItemActionPerformed

    private void addVideoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVideoMenuItemActionPerformed
        this.addVideoButtonActionPerformed(evt);
    }//GEN-LAST:event_addVideoMenuItemActionPerformed

    private void openWorkingDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openWorkingDirActionPerformed
        try {
            Desktop.getDesktop().open(new File(Capman.getWorkingDirectory()));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_openWorkingDirActionPerformed

    private void videosTableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_videosTableFocusLost
        videosTable.clearSelection();
    }//GEN-LAST:event_videosTableFocusLost

    private void filterFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterFieldKeyReleased
        String filter = this.filterField.getText();
        if (filter.length() == 0) {
            videosTableSorter.setRowFilter(null);
        } else {
            Pattern.quote(filter);
            //Filter case insensitive
            videosTableSorter.setRowFilter(RowFilter.regexFilter("(?i)" + filter));
        }
    }//GEN-LAST:event_filterFieldKeyReleased
    
    public void refreshVideo(Video video) {    
        ProgressBarTask progressTask = new ProgressBarTask(progressBar);
        progressTask.addPropertyChangeListener(this);
        progressTask.execute();
        JFrame self = this;
        Thread refreshThread = new Thread(new Runnable(){
            @Override
            public void run() {
                try {
                    CRUD.updateVideoCaptions(video);
                    progressTask.updateProgress(70);
                    progressTask.updateProgress(90);
                    videosTableList.fireTableDataChanged();
                    progressTask.finish();
                } 
                catch (UnknownHostException ex) {
                    JOptionPane.showMessageDialog(self, "No internet connection, please check", "Error", JOptionPane.ERROR_MESSAGE);
                } catch (Exception ex) {
                    progressTask.finish();
                    JOptionPane.showMessageDialog(self, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }                   
            }               
        });
        refreshThread.start();       
    }
    
    public void downloadVideoCaptions(Video video) {
        ProgressBarTask progressTask = new ProgressBarTask(progressBar);
        progressTask.addPropertyChangeListener(this);
        progressTask.execute();
        JFrame self = this;
        new Thread(new Runnable(){
            @Override
            public void run() {
                try {
                    Account selectedAccount = (Account)accountSelector.getSelectedItem();
                    CRUD.downloadVideoCaptions(video, selectedAccount, progressTask);
                    progressTask.finish();
                } 
                catch (UnknownHostException ex) {
                    JOptionPane.showMessageDialog(self, "No internet connection, please check", "Error", JOptionPane.ERROR_MESSAGE);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(self, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }).start();
    }
    
    public void editVideoAction(Video video) {
        new VideoForm(this, this.CRUD.getAllSites(), video).setVisible(true);
    }
    
    public void createVideo(String idVideoSite, String title, Site site, String idVideoYoutube) throws SQLException, MalformedURLException {
        Account selectedAccount = (Account)this.accountSelector.getSelectedItem();
        Video newVideo = this.CRUD.createVideo(selectedAccount, title, idVideoSite, site, idVideoYoutube);
        this.videosTableList.fireTableDataChanged();
        this.refreshVideo(newVideo);
    }
    
    public void updateVideo(Video video, String title, String idVideoSite, Site site, String idVideoYoutube) throws SQLException, MalformedURLException {
        this.CRUD.updateVideo(video, title, idVideoSite, site, idVideoYoutube);
        this.videosTableList.fireTableDataChanged();
        this.refreshVideo(video);
    }
    
    public void deleteVideo(Video video) {
        int optionSelected = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this video?", 
                "Deleting: "+video.getIdVideoSite(), JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if(optionSelected == JOptionPane.YES_OPTION){
            try {
                Account account = (Account)this.accountSelector.getSelectedItem();
                CRUD.deleteVideo(video, account);
                this.videosTableList.fireTableDataChanged();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    public void loadAccount() {
        try {
            Account selectedAccount = (Account)this.accountSelector.getSelectedItem();
            if (selectedAccount == null) {
                addAccountActionPerformed(null);
                return;
            }
            CRUD.loadAccount(selectedAccount);
            channelName.setText(Youtube.getYoutubeChannelName());
            videosTableList.setVideos(selectedAccount.getVideos());
            updateVideosTable();
        } 
        catch (UnknownHostException ex) {
            JOptionPane.showMessageDialog(this, "No internet connection, please check", "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage()+"\n"+ex.getClass().getName(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if ("progress".equals(evt.getPropertyName())) {
            int progress = (Integer) evt.getNewValue();
            if (progress != 0) {
                progressBar.setIndeterminate(false);
            }
            progressBar.setValue(progress);
        }
    }
    
    public void updateVideosWeight(ArrayList<Video> videos) {
        try {    
            CRUD.updateVideosWeight(videos);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage()+"\n"+ex.getClass().getName(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
 
    VideosTableURLRenderer urlRenderer = new VideosTableURLRenderer();
    private void updateVideosTable(){
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer() {
            @Override 
            public Component getTableCellRendererComponent(javax.swing.JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                super.getTableCellRendererComponent(table, value, isSelected, false, row, column);
                setFont(new java.awt.Font("Lucida Grande", 0, 18));
                setHorizontalAlignment(JLabel.CENTER);
                return this;
            }
        };
        TableColumn columnCaptionsLocal = videosTable.getColumnModel().getColumn(2);
        columnCaptionsLocal.setMaxWidth(60);
        columnCaptionsLocal.setCellRenderer(centerRenderer);
        TableColumn columnCaptionsRemote = videosTable.getColumnModel().getColumn(4);
        columnCaptionsRemote.setMaxWidth(60);
        columnCaptionsRemote.setCellRenderer(centerRenderer);
        videosTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        TableColumn columnURL = videosTable.getColumnModel().getColumn(1);
        columnURL.setCellRenderer(urlRenderer);
        TableColumn columnURLYoutube = videosTable.getColumnModel().getColumn(3);
        columnURLYoutube.setCellRenderer(urlRenderer);
        TableColumn columnActions = videosTable.getColumnModel().getColumn(5);
        columnActions.setMinWidth(120);
        columnActions.setCellRenderer(new VideosTableButtonsRenderer());
        columnActions.setCellEditor(new VideosTableButtonsEditor(videosTable));
        videosTableSorter = new TableRowSorter<>(videosTableList);
        videosTable.setRowSorter(videosTableSorter);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accountLabel;
    private javax.swing.JComboBox accountSelector;
    private javax.swing.JPanel accountsPanel;
    private javax.swing.JButton addAccount;
    private javax.swing.JMenuItem addAccountMenuButton;
    private javax.swing.JButton addVideoButton;
    private javax.swing.JMenuItem addVideoMenuItem;
    private javax.swing.JLabel channelName;
    private javax.swing.JLabel channelTitle;
    private javax.swing.JButton deleteButton;
    private javax.swing.JDialog dialogWaitingForLogin;
    private javax.swing.JLabel dialogWaitingTitle;
    private javax.swing.JLabel dndInfo;
    private javax.swing.JButton downloadButton;
    private javax.swing.JButton editButton;
    private javax.swing.JTextField filterField;
    private javax.swing.JLabel filterLabel;
    private javax.swing.JPanel headerDialogWaiting;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JLabel labelWaiting;
    private javax.swing.JLabel localLabel;
    private javax.swing.JMenu menuAccount;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuVideos;
    private javax.swing.JMenuItem openWorkingDir;
    private javax.swing.JPanel panelDnDInfo;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLabel remoteLabel;
    private javax.swing.JButton removeAccount;
    private javax.swing.JMenuItem removeAccountMenuItem;
    private javax.swing.JScrollPane scrollPaneTable;
    private javax.swing.JSeparator separator;
    private javax.swing.JPanel videosPanel;
    private javax.swing.JTable videosTable;
    // End of variables declaration//GEN-END:variables

}
